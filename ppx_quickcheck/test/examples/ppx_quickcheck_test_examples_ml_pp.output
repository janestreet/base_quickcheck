open Base
open Base_quickcheck
include
  struct
    module Base = struct  end
    module Base_quickcheck = struct  end
    module Quickcheckable = struct  end
  end
module Simple_reference =
  struct
    type t = bool[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator = quickcheck_generator_bool
        let _ = quickcheck_generator
        let quickcheck_observer = quickcheck_observer_bool
        let _ = quickcheck_observer
        let quickcheck_shrinker = quickcheck_shrinker_bool
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Dotted_reference =
  struct
    type t = Simple_reference.t[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator = Simple_reference.quickcheck_generator
        let _ = quickcheck_generator
        let quickcheck_observer = Simple_reference.quickcheck_observer
        let _ = quickcheck_observer
        let quickcheck_shrinker = Simple_reference.quickcheck_shrinker
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Nonrec_reference =
  struct
    open Dotted_reference
    type nonrec t = t[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator = quickcheck_generator
        let _ = quickcheck_generator
        let quickcheck_observer = quickcheck_observer
        let _ = quickcheck_observer
        let quickcheck_shrinker = quickcheck_shrinker
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Application_of_polymorphic_type =
  struct
    type t = bool option[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          quickcheck_generator_option quickcheck_generator_bool
        let _ = quickcheck_generator
        let quickcheck_observer =
          quickcheck_observer_option quickcheck_observer_bool
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          quickcheck_shrinker_option quickcheck_shrinker_bool
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Tuple =
  struct
    type t = (bool * unit option)[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
            (fun ~size:_size__008_ ->
               fun ~random:_random__009_ ->
                 ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                     quickcheck_generator_bool ~size:_size__008_
                     ~random:_random__009_),
                   (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                      (quickcheck_generator_option quickcheck_generator_unit)
                      ~size:_size__008_ ~random:_random__009_)))
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun _x__003_ ->
               fun ~size:_size__006_ ->
                 fun ~hash:_hash__007_ ->
                   let (_x__004_, _x__005_) = _x__003_ in
                   let _hash__007_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       quickcheck_observer_bool _x__004_ ~size:_size__006_
                       ~hash:_hash__007_ in
                   let _hash__007_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       (quickcheck_observer_option quickcheck_observer_unit)
                       _x__005_ ~size:_size__006_ ~hash:_hash__007_ in
                   _hash__007_)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (fun (_x__001_, _x__002_) ->
               Ppx_quickcheck_runtime.Base.Sequence.round_robin
                 [Ppx_quickcheck_runtime.Base.Sequence.map
                    (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                       quickcheck_shrinker_bool _x__001_)
                    ~f:(fun _x__001_ -> (_x__001_, _x__002_));
                 Ppx_quickcheck_runtime.Base.Sequence.map
                   (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                      (quickcheck_shrinker_option quickcheck_shrinker_unit)
                      _x__002_) ~f:(fun _x__002_ -> (_x__001_, _x__002_))])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Poly_variant =
  struct
    type t =
      [ `A  | `B  | `C of bool  | `D of bool  | `E of (bool * unit option) 
      | `F of (bool * unit option) ][@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
            [(1.,
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                  (fun ~size:_size__035_ -> fun ~random:_random__036_ -> `A)));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__037_ -> fun ~random:_random__038_ -> `B)));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__039_ ->
                    fun ~random:_random__040_ ->
                      `C
                        (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                           quickcheck_generator_bool ~size:_size__039_
                           ~random:_random__040_))));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__041_ ->
                    fun ~random:_random__042_ ->
                      `D
                        (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                           quickcheck_generator_bool ~size:_size__041_
                           ~random:_random__042_))));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__045_ ->
                    fun ~random:_random__046_ ->
                      `E
                        (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                           (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                              (fun ~size:_size__043_ ->
                                 fun ~random:_random__044_ ->
                                   ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                       quickcheck_generator_bool
                                       ~size:_size__043_
                                       ~random:_random__044_),
                                     (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                        (quickcheck_generator_option
                                           quickcheck_generator_unit)
                                        ~size:_size__043_
                                        ~random:_random__044_))))
                           ~size:_size__045_ ~random:_random__046_))));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__049_ ->
                    fun ~random:_random__050_ ->
                      `F
                        (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                           (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                              (fun ~size:_size__047_ ->
                                 fun ~random:_random__048_ ->
                                   ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                       quickcheck_generator_bool
                                       ~size:_size__047_
                                       ~random:_random__048_),
                                     (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                        (quickcheck_generator_option
                                           quickcheck_generator_unit)
                                        ~size:_size__047_
                                        ~random:_random__048_))))
                           ~size:_size__049_ ~random:_random__050_))))]
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun _x__018_ ->
               fun ~size:_size__019_ ->
                 fun ~hash:_hash__020_ ->
                   match _x__018_ with
                   | `A ->
                       let _hash__020_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__020_ 65 in
                       _hash__020_
                   | `B ->
                       let _hash__020_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__020_ 66 in
                       _hash__020_
                   | `C _x__021_ ->
                       let _hash__020_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__020_ 67 in
                       let _hash__020_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_bool _x__021_
                           ~size:_size__019_ ~hash:_hash__020_ in
                       _hash__020_
                   | `D _x__022_ ->
                       let _hash__020_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__020_ 68 in
                       let _hash__020_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_bool _x__022_
                           ~size:_size__019_ ~hash:_hash__020_ in
                       _hash__020_
                   | `E _x__028_ ->
                       let _hash__020_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__020_ 69 in
                       let _hash__020_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           (Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                              (fun _x__023_ ->
                                 fun ~size:_size__026_ ->
                                   fun ~hash:_hash__027_ ->
                                     let (_x__024_, _x__025_) = _x__023_ in
                                     let _hash__027_ =
                                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                         quickcheck_observer_bool _x__024_
                                         ~size:_size__026_ ~hash:_hash__027_ in
                                     let _hash__027_ =
                                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                         (quickcheck_observer_option
                                            quickcheck_observer_unit)
                                         _x__025_ ~size:_size__026_
                                         ~hash:_hash__027_ in
                                     _hash__027_)) _x__028_ ~size:_size__019_
                           ~hash:_hash__020_ in
                       _hash__020_
                   | `F _x__034_ ->
                       let _hash__020_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__020_ 70 in
                       let _hash__020_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           (Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                              (fun _x__029_ ->
                                 fun ~size:_size__032_ ->
                                   fun ~hash:_hash__033_ ->
                                     let (_x__030_, _x__031_) = _x__029_ in
                                     let _hash__033_ =
                                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                         quickcheck_observer_bool _x__030_
                                         ~size:_size__032_ ~hash:_hash__033_ in
                                     let _hash__033_ =
                                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                         (quickcheck_observer_option
                                            quickcheck_observer_unit)
                                         _x__031_ ~size:_size__032_
                                         ~hash:_hash__033_ in
                                     _hash__033_)) _x__034_ ~size:_size__019_
                           ~hash:_hash__020_ in
                       _hash__020_)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (function
             | `A -> Ppx_quickcheck_runtime.Base.Sequence.round_robin []
             | `B -> Ppx_quickcheck_runtime.Base.Sequence.round_robin []
             | `C _x__010_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         quickcheck_shrinker_bool _x__010_)
                      ~f:(fun _x__010_ -> `C _x__010_)]
             | `D _x__011_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         quickcheck_shrinker_bool _x__011_)
                      ~f:(fun _x__011_ -> `D _x__011_)]
             | `E _x__012_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                            (fun (_x__013_, _x__014_) ->
                               Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                 [Ppx_quickcheck_runtime.Base.Sequence.map
                                    (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                       quickcheck_shrinker_bool _x__013_)
                                    ~f:(fun _x__013_ -> (_x__013_, _x__014_));
                                 Ppx_quickcheck_runtime.Base.Sequence.map
                                   (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                      (quickcheck_shrinker_option
                                         quickcheck_shrinker_unit) _x__014_)
                                   ~f:(fun _x__014_ -> (_x__013_, _x__014_))]))
                         _x__012_) ~f:(fun _x__012_ -> `E _x__012_)]
             | `F _x__015_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                            (fun (_x__016_, _x__017_) ->
                               Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                 [Ppx_quickcheck_runtime.Base.Sequence.map
                                    (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                       quickcheck_shrinker_bool _x__016_)
                                    ~f:(fun _x__016_ -> (_x__016_, _x__017_));
                                 Ppx_quickcheck_runtime.Base.Sequence.map
                                   (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                      (quickcheck_shrinker_option
                                         quickcheck_shrinker_unit) _x__017_)
                                   ~f:(fun _x__017_ -> (_x__016_, _x__017_))]))
                         _x__015_) ~f:(fun _x__015_ -> `F _x__015_)])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Inherit_poly_variant =
  struct
    type t = [ `X  | Poly_variant.t | `Z of unit option ][@@deriving
                                                           quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
            [(1.,
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                  (fun ~size:_size__058_ -> fun ~random:_random__059_ -> `X)));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__060_ ->
                    fun ~random:_random__061_ ->
                      (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                         Poly_variant.quickcheck_generator ~size:_size__060_
                         ~random:_random__061_ : Poly_variant.t  :> [ `X 
                                                                    | Poly_variant.t
                                                                    | `Z of
                                                                    unit
                                                                    option ]))));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__062_ ->
                    fun ~random:_random__063_ ->
                      `Z
                        (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                           (quickcheck_generator_option
                              quickcheck_generator_unit) ~size:_size__062_
                           ~random:_random__063_))))]
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun _x__053_ ->
               fun ~size:_size__054_ ->
                 fun ~hash:_hash__055_ ->
                   match _x__053_ with
                   | `X ->
                       let _hash__055_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__055_ 88 in
                       _hash__055_
                   | #Poly_variant.t as _x__056_ ->
                       let _hash__055_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           Poly_variant.quickcheck_observer _x__056_
                           ~size:_size__054_ ~hash:_hash__055_ in
                       _hash__055_
                   | `Z _x__057_ ->
                       let _hash__055_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__055_ 90 in
                       let _hash__055_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           (quickcheck_observer_option
                              quickcheck_observer_unit) _x__057_
                           ~size:_size__054_ ~hash:_hash__055_ in
                       _hash__055_)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (function
             | `X -> Ppx_quickcheck_runtime.Base.Sequence.round_robin []
             | #Poly_variant.t as _x__051_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         Poly_variant.quickcheck_shrinker _x__051_)
                      ~f:(fun _x__051_ ->
                            (_x__051_ : Poly_variant.t  :> [ `X 
                                                           | Poly_variant.t
                                                           | `Z of
                                                               unit option ]))]
             | `Z _x__052_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         (quickcheck_shrinker_option quickcheck_shrinker_unit)
                         _x__052_) ~f:(fun _x__052_ -> `Z _x__052_)])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Record_type =
  struct
    type t = {
      mutable x: bool ;
      y: unit option }[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
            (fun ~size:_size__071_ ->
               fun ~random:_random__072_ ->
                 {
                   x =
                     (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                        quickcheck_generator_bool ~size:_size__071_
                        ~random:_random__072_);
                   y =
                     (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                        (quickcheck_generator_option
                           quickcheck_generator_unit) ~size:_size__071_
                        ~random:_random__072_)
                 })
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun _x__066_ ->
               fun ~size:_size__069_ ->
                 fun ~hash:_hash__070_ ->
                   let { x = _x__067_; y = _x__068_ } = _x__066_ in
                   let _hash__070_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       quickcheck_observer_bool _x__067_ ~size:_size__069_
                       ~hash:_hash__070_ in
                   let _hash__070_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       (quickcheck_observer_option quickcheck_observer_unit)
                       _x__068_ ~size:_size__069_ ~hash:_hash__070_ in
                   _hash__070_)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (fun { x = _x__064_; y = _x__065_ } ->
               Ppx_quickcheck_runtime.Base.Sequence.round_robin
                 [Ppx_quickcheck_runtime.Base.Sequence.map
                    (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                       quickcheck_shrinker_bool _x__064_)
                    ~f:(fun _x__064_ -> { x = _x__064_; y = _x__065_ });
                 Ppx_quickcheck_runtime.Base.Sequence.map
                   (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                      (quickcheck_shrinker_option quickcheck_shrinker_unit)
                      _x__065_)
                   ~f:(fun _x__065_ -> { x = _x__064_; y = _x__065_ })])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Nullary_and_unary_variant =
  struct
    type t =
      | A 
      | B 
      | C of unit 
      | D of unit [@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
            [(1.,
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                  (fun ~size:_size__080_ -> fun ~random:_random__081_ -> A)));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__082_ -> fun ~random:_random__083_ -> B)));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__084_ ->
                    fun ~random:_random__085_ ->
                      C
                        (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                           quickcheck_generator_unit ~size:_size__084_
                           ~random:_random__085_))));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__086_ ->
                    fun ~random:_random__087_ ->
                      D
                        (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                           quickcheck_generator_unit ~size:_size__086_
                           ~random:_random__087_))))]
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun _x__075_ ->
               fun ~size:_size__076_ ->
                 fun ~hash:_hash__077_ ->
                   match _x__075_ with
                   | A ->
                       let _hash__077_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__077_ 0 in
                       _hash__077_
                   | B ->
                       let _hash__077_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__077_ 1 in
                       _hash__077_
                   | C _x__078_ ->
                       let _hash__077_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__077_ 2 in
                       let _hash__077_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_unit _x__078_
                           ~size:_size__076_ ~hash:_hash__077_ in
                       _hash__077_
                   | D _x__079_ ->
                       let _hash__077_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__077_ 3 in
                       let _hash__077_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_unit _x__079_
                           ~size:_size__076_ ~hash:_hash__077_ in
                       _hash__077_)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (function
             | A -> Ppx_quickcheck_runtime.Base.Sequence.round_robin []
             | B -> Ppx_quickcheck_runtime.Base.Sequence.round_robin []
             | C _x__073_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         quickcheck_shrinker_unit _x__073_)
                      ~f:(fun _x__073_ -> C _x__073_)]
             | D _x__074_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         quickcheck_shrinker_unit _x__074_)
                      ~f:(fun _x__074_ -> D _x__074_)])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Binary_and_record_variant =
  struct
    type t =
      | A of bool * [ `X  | `Y  | `Z of unit ] 
      | B of bool * [ `X  | `Y  | `Z of unit ] 
      | C of {
      x: unit option ;
      mutable y: bool } 
      | D of {
      x: unit option ;
      mutable y: bool } [@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
            [(1.,
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                  (fun ~size:_size__123_ ->
                     fun ~random:_random__124_ ->
                       A
                         ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                             quickcheck_generator_bool ~size:_size__123_
                             ~random:_random__124_),
                           (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                                 [(1.,
                                    (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                       (fun ~size:_size__117_ ->
                                          fun ~random:_random__118_ -> `X)));
                                 (1.,
                                   (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                      (fun ~size:_size__119_ ->
                                         fun ~random:_random__120_ -> `Y)));
                                 (1.,
                                   (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                      (fun ~size:_size__121_ ->
                                         fun ~random:_random__122_ ->
                                           `Z
                                             (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                quickcheck_generator_unit
                                                ~size:_size__121_
                                                ~random:_random__122_))))])
                              ~size:_size__123_ ~random:_random__124_)))));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__131_ ->
                    fun ~random:_random__132_ ->
                      B
                        ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                            quickcheck_generator_bool ~size:_size__131_
                            ~random:_random__132_),
                          (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                             (Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                                [(1.,
                                   (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                      (fun ~size:_size__125_ ->
                                         fun ~random:_random__126_ -> `X)));
                                (1.,
                                  (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                     (fun ~size:_size__127_ ->
                                        fun ~random:_random__128_ -> `Y)));
                                (1.,
                                  (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                     (fun ~size:_size__129_ ->
                                        fun ~random:_random__130_ ->
                                          `Z
                                            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                               quickcheck_generator_unit
                                               ~size:_size__129_
                                               ~random:_random__130_))))])
                             ~size:_size__131_ ~random:_random__132_)))));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__133_ ->
                    fun ~random:_random__134_ ->
                      C
                        {
                          x =
                            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                               (quickcheck_generator_option
                                  quickcheck_generator_unit)
                               ~size:_size__133_ ~random:_random__134_);
                          y =
                            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                               quickcheck_generator_bool ~size:_size__133_
                               ~random:_random__134_)
                        })));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__135_ ->
                    fun ~random:_random__136_ ->
                      D
                        {
                          x =
                            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                               (quickcheck_generator_option
                                  quickcheck_generator_unit)
                               ~size:_size__135_ ~random:_random__136_);
                          y =
                            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                               quickcheck_generator_bool ~size:_size__135_
                               ~random:_random__136_)
                        })))]
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun _x__098_ ->
               fun ~size:_size__099_ ->
                 fun ~hash:_hash__100_ ->
                   match _x__098_ with
                   | A (_x__105_, _x__106_) ->
                       let _hash__100_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__100_ 0 in
                       let _hash__100_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_bool _x__105_
                           ~size:_size__099_ ~hash:_hash__100_ in
                       let _hash__100_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           (Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                              (fun _x__101_ ->
                                 fun ~size:_size__102_ ->
                                   fun ~hash:_hash__103_ ->
                                     match _x__101_ with
                                     | `X ->
                                         let _hash__103_ =
                                           Ppx_quickcheck_runtime.Base.hash_fold_int
                                             _hash__103_ 88 in
                                         _hash__103_
                                     | `Y ->
                                         let _hash__103_ =
                                           Ppx_quickcheck_runtime.Base.hash_fold_int
                                             _hash__103_ 89 in
                                         _hash__103_
                                     | `Z _x__104_ ->
                                         let _hash__103_ =
                                           Ppx_quickcheck_runtime.Base.hash_fold_int
                                             _hash__103_ 90 in
                                         let _hash__103_ =
                                           Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                             quickcheck_observer_unit
                                             _x__104_ ~size:_size__102_
                                             ~hash:_hash__103_ in
                                         _hash__103_)) _x__106_
                           ~size:_size__099_ ~hash:_hash__100_ in
                       _hash__100_
                   | B (_x__111_, _x__112_) ->
                       let _hash__100_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__100_ 1 in
                       let _hash__100_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_bool _x__111_
                           ~size:_size__099_ ~hash:_hash__100_ in
                       let _hash__100_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           (Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                              (fun _x__107_ ->
                                 fun ~size:_size__108_ ->
                                   fun ~hash:_hash__109_ ->
                                     match _x__107_ with
                                     | `X ->
                                         let _hash__109_ =
                                           Ppx_quickcheck_runtime.Base.hash_fold_int
                                             _hash__109_ 88 in
                                         _hash__109_
                                     | `Y ->
                                         let _hash__109_ =
                                           Ppx_quickcheck_runtime.Base.hash_fold_int
                                             _hash__109_ 89 in
                                         _hash__109_
                                     | `Z _x__110_ ->
                                         let _hash__109_ =
                                           Ppx_quickcheck_runtime.Base.hash_fold_int
                                             _hash__109_ 90 in
                                         let _hash__109_ =
                                           Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                             quickcheck_observer_unit
                                             _x__110_ ~size:_size__108_
                                             ~hash:_hash__109_ in
                                         _hash__109_)) _x__112_
                           ~size:_size__099_ ~hash:_hash__100_ in
                       _hash__100_
                   | C { x = _x__113_; y = _x__114_ } ->
                       let _hash__100_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__100_ 2 in
                       let _hash__100_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           (quickcheck_observer_option
                              quickcheck_observer_unit) _x__113_
                           ~size:_size__099_ ~hash:_hash__100_ in
                       let _hash__100_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_bool _x__114_
                           ~size:_size__099_ ~hash:_hash__100_ in
                       _hash__100_
                   | D { x = _x__115_; y = _x__116_ } ->
                       let _hash__100_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__100_ 3 in
                       let _hash__100_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           (quickcheck_observer_option
                              quickcheck_observer_unit) _x__115_
                           ~size:_size__099_ ~hash:_hash__100_ in
                       let _hash__100_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_bool _x__116_
                           ~size:_size__099_ ~hash:_hash__100_ in
                       _hash__100_)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (function
             | A (_x__088_, _x__089_) ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         quickcheck_shrinker_bool _x__088_)
                      ~f:(fun _x__088_ -> A (_x__088_, _x__089_));
                   Ppx_quickcheck_runtime.Base.Sequence.map
                     (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                        (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                           (function
                            | `X ->
                                Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                  []
                            | `Y ->
                                Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                  []
                            | `Z _x__090_ ->
                                Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                  [Ppx_quickcheck_runtime.Base.Sequence.map
                                     (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                        quickcheck_shrinker_unit _x__090_)
                                     ~f:(fun _x__090_ -> `Z _x__090_)]))
                        _x__089_) ~f:(fun _x__089_ -> A (_x__088_, _x__089_))]
             | B (_x__091_, _x__092_) ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         quickcheck_shrinker_bool _x__091_)
                      ~f:(fun _x__091_ -> B (_x__091_, _x__092_));
                   Ppx_quickcheck_runtime.Base.Sequence.map
                     (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                        (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                           (function
                            | `X ->
                                Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                  []
                            | `Y ->
                                Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                  []
                            | `Z _x__093_ ->
                                Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                  [Ppx_quickcheck_runtime.Base.Sequence.map
                                     (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                        quickcheck_shrinker_unit _x__093_)
                                     ~f:(fun _x__093_ -> `Z _x__093_)]))
                        _x__092_) ~f:(fun _x__092_ -> B (_x__091_, _x__092_))]
             | C { x = _x__094_; y = _x__095_ } ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         (quickcheck_shrinker_option quickcheck_shrinker_unit)
                         _x__094_)
                      ~f:(fun _x__094_ -> C { x = _x__094_; y = _x__095_ });
                   Ppx_quickcheck_runtime.Base.Sequence.map
                     (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                        quickcheck_shrinker_bool _x__095_)
                     ~f:(fun _x__095_ -> C { x = _x__094_; y = _x__095_ })]
             | D { x = _x__096_; y = _x__097_ } ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         (quickcheck_shrinker_option quickcheck_shrinker_unit)
                         _x__096_)
                      ~f:(fun _x__096_ -> D { x = _x__096_; y = _x__097_ });
                   Ppx_quickcheck_runtime.Base.Sequence.map
                     (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                        quickcheck_shrinker_bool _x__097_)
                     ~f:(fun _x__097_ -> D { x = _x__096_; y = _x__097_ })])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Simple_arrow =
  struct
    type t = unit option -> bool[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
            (quickcheck_observer_option quickcheck_observer_unit)
            quickcheck_generator_bool
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
            (quickcheck_generator_option quickcheck_generator_unit)
            quickcheck_observer_bool
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.atomic
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Named_arrow =
  struct
    type t = x:unit option -> bool[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.map
            ~f:(fun _f__139_ -> fun ~x:_x__140_ -> _f__139_ _x__140_)
            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
               (quickcheck_observer_option quickcheck_observer_unit)
               quickcheck_generator_bool)
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.unmap
            ~f:(fun _f__137_ -> fun _x__138_ -> _f__137_ ~x:_x__138_)
            (Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
               (quickcheck_generator_option quickcheck_generator_unit)
               quickcheck_observer_bool)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.atomic
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Optional_arrow =
  struct
    type t = ?x:unit option -> unit -> bool[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.map
            ~f:(fun _f__143_ -> fun ?x:_x__144_ -> _f__143_ _x__144_)
            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
               (Ppx_quickcheck_runtime.Base_quickcheck.Observer.option
                  (quickcheck_observer_option quickcheck_observer_unit))
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
                  quickcheck_observer_unit quickcheck_generator_bool))
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.unmap
            ~f:(fun _f__141_ -> fun _x__142_ -> _f__141_ ?x:_x__142_)
            (Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.option
                  (quickcheck_generator_option quickcheck_generator_unit))
               (Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
                  quickcheck_generator_unit quickcheck_observer_bool))
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.atomic
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Curried_arrow =
  struct
    type t = unit option -> bool option -> bool[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
            (quickcheck_observer_option quickcheck_observer_unit)
            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
               (quickcheck_observer_option quickcheck_observer_bool)
               quickcheck_generator_bool)
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
            (quickcheck_generator_option quickcheck_generator_unit)
            (Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
               (quickcheck_generator_option quickcheck_generator_bool)
               quickcheck_observer_bool)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.atomic
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Simple_higher_order =
  struct
    type t = (unit option -> bool option) -> bool[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
            (Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
               (quickcheck_generator_option quickcheck_generator_unit)
               (quickcheck_observer_option quickcheck_observer_bool))
            quickcheck_generator_bool
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
               (quickcheck_observer_option quickcheck_observer_unit)
               (quickcheck_generator_option quickcheck_generator_bool))
            quickcheck_observer_bool
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.atomic
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Named_higher_order =
  struct
    type t = (x:unit option -> bool option) -> bool[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
            (Ppx_quickcheck_runtime.Base_quickcheck.Observer.unmap
               ~f:(fun _f__147_ -> fun _x__148_ -> _f__147_ ~x:_x__148_)
               (Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
                  (quickcheck_generator_option quickcheck_generator_unit)
                  (quickcheck_observer_option quickcheck_observer_bool)))
            quickcheck_generator_bool
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.map
               ~f:(fun _f__145_ -> fun ~x:_x__146_ -> _f__145_ _x__146_)
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
                  (quickcheck_observer_option quickcheck_observer_unit)
                  (quickcheck_generator_option quickcheck_generator_bool)))
            quickcheck_observer_bool
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.atomic
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Optional_higher_order =
  struct
    type t = (?x:unit option -> unit -> bool option) -> bool[@@deriving
                                                              quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
            (Ppx_quickcheck_runtime.Base_quickcheck.Observer.unmap
               ~f:(fun _f__151_ -> fun _x__152_ -> _f__151_ ?x:_x__152_)
               (Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
                  (Ppx_quickcheck_runtime.Base_quickcheck.Generator.option
                     (quickcheck_generator_option quickcheck_generator_unit))
                  (Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
                     quickcheck_generator_unit
                     (quickcheck_observer_option quickcheck_observer_bool))))
            quickcheck_generator_bool
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.map
               ~f:(fun _f__149_ -> fun ?x:_x__150_ -> _f__149_ _x__150_)
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
                  (Ppx_quickcheck_runtime.Base_quickcheck.Observer.option
                     (quickcheck_observer_option quickcheck_observer_unit))
                  (Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
                     quickcheck_observer_unit
                     (quickcheck_generator_option quickcheck_generator_bool))))
            quickcheck_observer_bool
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.atomic
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Poly_unary =
  struct
    type 'a t = 'a list[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : 'a t) -> ()
        let quickcheck_generator _generator__155_ =
          quickcheck_generator_list _generator__155_
        let _ = quickcheck_generator
        let quickcheck_observer _observer__154_ =
          quickcheck_observer_list _observer__154_
        let _ = quickcheck_observer
        let quickcheck_shrinker _shrinker__153_ =
          quickcheck_shrinker_list _shrinker__153_
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Instance_of_unary =
  struct
    type t = bool Poly_unary.t[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Poly_unary.quickcheck_generator quickcheck_generator_bool
        let _ = quickcheck_generator
        let quickcheck_observer =
          Poly_unary.quickcheck_observer quickcheck_observer_bool
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Poly_unary.quickcheck_shrinker quickcheck_shrinker_bool
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Poly_binary =
  struct
    type ('a, 'b) t = ('a * 'b)[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : ('a, 'b) t) -> ()
        let quickcheck_generator _generator__167_ _generator__168_ =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
            (fun ~size:_size__169_ ->
               fun ~random:_random__170_ ->
                 ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                     _generator__167_ ~size:_size__169_ ~random:_random__170_),
                   (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                      _generator__168_ ~size:_size__169_
                      ~random:_random__170_)))
        let _ = quickcheck_generator
        let quickcheck_observer _observer__160_ _observer__161_ =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun _x__162_ ->
               fun ~size:_size__165_ ->
                 fun ~hash:_hash__166_ ->
                   let (_x__163_, _x__164_) = _x__162_ in
                   let _hash__166_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       _observer__160_ _x__163_ ~size:_size__165_
                       ~hash:_hash__166_ in
                   let _hash__166_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       _observer__161_ _x__164_ ~size:_size__165_
                       ~hash:_hash__166_ in
                   _hash__166_)
        let _ = quickcheck_observer
        let quickcheck_shrinker _shrinker__156_ _shrinker__157_ =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (fun (_x__158_, _x__159_) ->
               Ppx_quickcheck_runtime.Base.Sequence.round_robin
                 [Ppx_quickcheck_runtime.Base.Sequence.map
                    (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                       _shrinker__156_ _x__158_)
                    ~f:(fun _x__158_ -> (_x__158_, _x__159_));
                 Ppx_quickcheck_runtime.Base.Sequence.map
                   (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                      _shrinker__157_ _x__159_)
                   ~f:(fun _x__159_ -> (_x__158_, _x__159_))])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Instance_of_binary =
  struct
    type t = (bool, unit option) Poly_binary.t[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Poly_binary.quickcheck_generator quickcheck_generator_bool
            (quickcheck_generator_option quickcheck_generator_unit)
        let _ = quickcheck_generator
        let quickcheck_observer =
          Poly_binary.quickcheck_observer quickcheck_observer_bool
            (quickcheck_observer_option quickcheck_observer_unit)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Poly_binary.quickcheck_shrinker quickcheck_shrinker_bool
            (quickcheck_shrinker_option quickcheck_shrinker_unit)
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Poly_ternary =
  struct
    type ('a, 'b, 'c) t = ('a * 'b * 'c)[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : ('a, 'b, 'c) t) -> ()
        let quickcheck_generator _generator__186_ _generator__187_
          _generator__188_ =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
            (fun ~size:_size__189_ ->
               fun ~random:_random__190_ ->
                 ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                     _generator__186_ ~size:_size__189_ ~random:_random__190_),
                   (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                      _generator__187_ ~size:_size__189_
                      ~random:_random__190_),
                   (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                      _generator__188_ ~size:_size__189_
                      ~random:_random__190_)))
        let _ = quickcheck_generator
        let quickcheck_observer _observer__177_ _observer__178_
          _observer__179_ =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun _x__180_ ->
               fun ~size:_size__184_ ->
                 fun ~hash:_hash__185_ ->
                   let (_x__181_, _x__182_, _x__183_) = _x__180_ in
                   let _hash__185_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       _observer__177_ _x__181_ ~size:_size__184_
                       ~hash:_hash__185_ in
                   let _hash__185_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       _observer__178_ _x__182_ ~size:_size__184_
                       ~hash:_hash__185_ in
                   let _hash__185_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       _observer__179_ _x__183_ ~size:_size__184_
                       ~hash:_hash__185_ in
                   _hash__185_)
        let _ = quickcheck_observer
        let quickcheck_shrinker _shrinker__171_ _shrinker__172_
          _shrinker__173_ =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (fun (_x__174_, _x__175_, _x__176_) ->
               Ppx_quickcheck_runtime.Base.Sequence.round_robin
                 [Ppx_quickcheck_runtime.Base.Sequence.map
                    (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                       _shrinker__171_ _x__174_)
                    ~f:(fun _x__174_ -> (_x__174_, _x__175_, _x__176_));
                 Ppx_quickcheck_runtime.Base.Sequence.map
                   (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                      _shrinker__172_ _x__175_)
                   ~f:(fun _x__175_ -> (_x__174_, _x__175_, _x__176_));
                 Ppx_quickcheck_runtime.Base.Sequence.map
                   (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                      _shrinker__173_ _x__176_)
                   ~f:(fun _x__176_ -> (_x__174_, _x__175_, _x__176_))])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Instance_of_ternary =
  struct
    type t =
      (bool, unit option, (unit option, bool) Poly_binary.t) Poly_ternary.t
    [@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Poly_ternary.quickcheck_generator quickcheck_generator_bool
            (quickcheck_generator_option quickcheck_generator_unit)
            (Poly_binary.quickcheck_generator
               (quickcheck_generator_option quickcheck_generator_unit)
               quickcheck_generator_bool)
        let _ = quickcheck_generator
        let quickcheck_observer =
          Poly_ternary.quickcheck_observer quickcheck_observer_bool
            (quickcheck_observer_option quickcheck_observer_unit)
            (Poly_binary.quickcheck_observer
               (quickcheck_observer_option quickcheck_observer_unit)
               quickcheck_observer_bool)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Poly_ternary.quickcheck_shrinker quickcheck_shrinker_bool
            (quickcheck_shrinker_option quickcheck_shrinker_unit)
            (Poly_binary.quickcheck_shrinker
               (quickcheck_shrinker_option quickcheck_shrinker_unit)
               quickcheck_shrinker_bool)
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Poly_with_variance =
  struct
    type (-'a, +'b) t = ('b * ('a -> 'b))[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : ('a, 'b) t) -> ()
        let quickcheck_generator _observer__202_ _generator__203_ =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
            (fun ~size:_size__204_ ->
               fun ~random:_random__205_ ->
                 ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                     _generator__203_ ~size:_size__204_ ~random:_random__205_),
                   (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                      (Ppx_quickcheck_runtime.Base_quickcheck.Generator.fn
                         _observer__202_ _generator__203_) ~size:_size__204_
                      ~random:_random__205_)))
        let _ = quickcheck_generator
        let quickcheck_observer _generator__195_ _observer__196_ =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun _x__197_ ->
               fun ~size:_size__200_ ->
                 fun ~hash:_hash__201_ ->
                   let (_x__198_, _x__199_) = _x__197_ in
                   let _hash__201_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       _observer__196_ _x__198_ ~size:_size__200_
                       ~hash:_hash__201_ in
                   let _hash__201_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       (Ppx_quickcheck_runtime.Base_quickcheck.Observer.fn
                          _generator__195_ _observer__196_) _x__199_
                       ~size:_size__200_ ~hash:_hash__201_ in
                   _hash__201_)
        let _ = quickcheck_observer
        let quickcheck_shrinker _shrinker__191_ _shrinker__192_ =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (fun (_x__193_, _x__194_) ->
               Ppx_quickcheck_runtime.Base.Sequence.round_robin
                 [Ppx_quickcheck_runtime.Base.Sequence.map
                    (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                       _shrinker__192_ _x__193_)
                    ~f:(fun _x__193_ -> (_x__193_, _x__194_));
                 Ppx_quickcheck_runtime.Base.Sequence.map
                   (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                      Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.atomic
                      _x__194_) ~f:(fun _x__194_ -> (_x__193_, _x__194_))])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Instance_with_variance =
  struct
    type t = (bool, unit option) Poly_with_variance.t
    let quickcheck_generator =
      Poly_with_variance.quickcheck_generator quickcheck_observer_bool
        (quickcheck_generator_option quickcheck_generator_unit)
    let quickcheck_observer =
      Poly_with_variance.quickcheck_observer quickcheck_generator_bool
        (quickcheck_observer_option quickcheck_observer_unit)
    let quickcheck_shrinker =
      Poly_with_variance.quickcheck_shrinker quickcheck_shrinker_bool
        (quickcheck_shrinker_option quickcheck_shrinker_unit)
    let _quickcheck_generator_with_custom =
      Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
        [(1.,
           (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
              (fun ~size:_size__206_ ->
                 fun ~random:_random__207_ ->
                   `Foo
                     (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                        quickcheck_generator ~size:_size__206_
                        ~random:_random__207_))))]
  end
module Poly_with_phantom =
  struct
    type _ t = unit option[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : _ t) -> ()
        let quickcheck_generator _generator__213_ =
          quickcheck_generator_option quickcheck_generator_unit
        let _ = quickcheck_generator
        let quickcheck_observer _observer__211_ =
          quickcheck_observer_option quickcheck_observer_unit
        let _ = quickcheck_observer
        let quickcheck_shrinker _shrinker__209_ =
          quickcheck_shrinker_option quickcheck_shrinker_unit
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Instance_with_phantom =
  struct
    type t = [ `phantom ] Poly_with_phantom.t[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Poly_with_phantom.quickcheck_generator
            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
               [(1.,
                  (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                     (fun ~size:_size__217_ ->
                        fun ~random:_random__218_ -> `phantom)))])
        let _ = quickcheck_generator
        let quickcheck_observer =
          Poly_with_phantom.quickcheck_observer
            (Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
               (fun _x__214_ ->
                  fun ~size:_size__215_ ->
                    fun ~hash:_hash__216_ ->
                      match _x__214_ with
                      | `phantom ->
                          let _hash__216_ =
                            Ppx_quickcheck_runtime.Base.hash_fold_int
                              _hash__216_ (-378691891) in
                          _hash__216_))
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Poly_with_phantom.quickcheck_shrinker
            (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
               (function
                | `phantom ->
                    Ppx_quickcheck_runtime.Base.Sequence.round_robin []))
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Recursive =
  struct
    type t =
      | Leaf 
      | Node of t * t [@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        include
          struct
            open
              struct
                let rec (quickcheck_generator :
                  t Ppx_quickcheck_runtime.Base_quickcheck.Generator.t
                    Ppx_quickcheck_runtime.Base.Lazy.t)
                  =
                  lazy
                    (let quickcheck_generator =
                       Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                         quickcheck_generator in
                     ignore quickcheck_generator;
                     (let _pair__229_ =
                        (1.,
                          (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                             (fun ~size:_size__233_ ->
                                fun ~random:_random__234_ -> Leaf)))
                      and _pair__230_ =
                        (1.,
                          (Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                             Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                             ~f:(fun _size__226_ ->
                                   Ppx_quickcheck_runtime.Base_quickcheck.Generator.with_size
                                     ~size:(Ppx_quickcheck_runtime.Base.Int.pred
                                              _size__226_)
                                     (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                        (fun ~size:_size__231_ ->
                                           fun ~random:_random__232_ ->
                                             Node
                                               ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                   quickcheck_generator
                                                   ~size:_size__231_
                                                   ~random:_random__232_),
                                                 (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                    quickcheck_generator
                                                    ~size:_size__231_
                                                    ~random:_random__232_))))))) in
                      let _gen__227_ =
                        Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                          [_pair__229_]
                      and _gen__228_ =
                        Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                          [_pair__229_; _pair__230_] in
                      Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                        Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                        ~f:(function | 0 -> _gen__227_ | _ -> _gen__228_)))
                let _ = quickcheck_generator
              end
            let quickcheck_generator =
              Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                quickcheck_generator
            let _ = quickcheck_generator
          end
        include
          struct
            open
              struct
                let rec (quickcheck_observer :
                  t Ppx_quickcheck_runtime.Base_quickcheck.Observer.t
                    Ppx_quickcheck_runtime.Base.Lazy.t)
                  =
                  lazy
                    (let quickcheck_observer =
                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                         quickcheck_observer in
                     ignore quickcheck_observer;
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                       (fun _x__221_ ->
                          fun ~size:_size__222_ ->
                            fun ~hash:_hash__223_ ->
                              match _x__221_ with
                              | Leaf ->
                                  let _hash__223_ =
                                    Ppx_quickcheck_runtime.Base.hash_fold_int
                                      _hash__223_ 0 in
                                  _hash__223_
                              | Node (_x__224_, _x__225_) ->
                                  let _hash__223_ =
                                    Ppx_quickcheck_runtime.Base.hash_fold_int
                                      _hash__223_ 1 in
                                  let _hash__223_ =
                                    Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                      quickcheck_observer _x__224_
                                      ~size:_size__222_ ~hash:_hash__223_ in
                                  let _hash__223_ =
                                    Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                      quickcheck_observer _x__225_
                                      ~size:_size__222_ ~hash:_hash__223_ in
                                  _hash__223_))
                let _ = quickcheck_observer
              end
            let quickcheck_observer =
              Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                quickcheck_observer
            let _ = quickcheck_observer
          end
        include
          struct
            open
              struct
                let rec (quickcheck_shrinker :
                  t Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.t
                    Ppx_quickcheck_runtime.Base.Lazy.t)
                  =
                  lazy
                    (let quickcheck_shrinker =
                       Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                         quickcheck_shrinker in
                     ignore quickcheck_shrinker;
                     Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                       (function
                        | Leaf ->
                            Ppx_quickcheck_runtime.Base.Sequence.round_robin
                              []
                        | Node (_x__219_, _x__220_) ->
                            Ppx_quickcheck_runtime.Base.Sequence.round_robin
                              [Ppx_quickcheck_runtime.Base.Sequence.map
                                 (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                    quickcheck_shrinker _x__219_)
                                 ~f:(fun _x__219_ ->
                                       Node (_x__219_, _x__220_));
                              Ppx_quickcheck_runtime.Base.Sequence.map
                                (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                   quickcheck_shrinker _x__220_)
                                ~f:(fun _x__220_ -> Node (_x__219_, _x__220_))]))
                let _ = quickcheck_shrinker
              end
            let quickcheck_shrinker =
              Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                quickcheck_shrinker
            let _ = quickcheck_shrinker
          end
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Recursive_with_indirect_base_case =
  struct
    type t = {
      children: t list }[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        include
          struct
            open
              struct
                let rec (quickcheck_generator :
                  t Ppx_quickcheck_runtime.Base_quickcheck.Generator.t
                    Ppx_quickcheck_runtime.Base.Lazy.t)
                  =
                  lazy
                    (let quickcheck_generator =
                       Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                         quickcheck_generator in
                     ignore quickcheck_generator;
                     Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                       (fun ~size:_size__240_ ->
                          fun ~random:_random__241_ ->
                            {
                              children =
                                (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                   (quickcheck_generator_list
                                      quickcheck_generator) ~size:_size__240_
                                   ~random:_random__241_)
                            }))
                let _ = quickcheck_generator
              end
            let quickcheck_generator =
              Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                quickcheck_generator
            let _ = quickcheck_generator
          end
        include
          struct
            open
              struct
                let rec (quickcheck_observer :
                  t Ppx_quickcheck_runtime.Base_quickcheck.Observer.t
                    Ppx_quickcheck_runtime.Base.Lazy.t)
                  =
                  lazy
                    (let quickcheck_observer =
                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                         quickcheck_observer in
                     ignore quickcheck_observer;
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                       (fun _x__236_ ->
                          fun ~size:_size__238_ ->
                            fun ~hash:_hash__239_ ->
                              let { children = _x__237_ } = _x__236_ in
                              let _hash__239_ =
                                Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                  (quickcheck_observer_list
                                     quickcheck_observer) _x__237_
                                  ~size:_size__238_ ~hash:_hash__239_ in
                              _hash__239_))
                let _ = quickcheck_observer
              end
            let quickcheck_observer =
              Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                quickcheck_observer
            let _ = quickcheck_observer
          end
        include
          struct
            open
              struct
                let rec (quickcheck_shrinker :
                  t Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.t
                    Ppx_quickcheck_runtime.Base.Lazy.t)
                  =
                  lazy
                    (let quickcheck_shrinker =
                       Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                         quickcheck_shrinker in
                     ignore quickcheck_shrinker;
                     Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                       (fun { children = _x__235_ } ->
                          Ppx_quickcheck_runtime.Base.Sequence.round_robin
                            [Ppx_quickcheck_runtime.Base.Sequence.map
                               (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                  (quickcheck_shrinker_list
                                     quickcheck_shrinker) _x__235_)
                               ~f:(fun _x__235_ -> { children = _x__235_ })]))
                let _ = quickcheck_shrinker
              end
            let quickcheck_shrinker =
              Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                quickcheck_shrinker
            let _ = quickcheck_shrinker
          end
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Mutually_recursive =
  struct
    type expr =
      | Constant of int64 
      | Operator of op 
      | Application of expr * args 
    and op = [ `plus  | `minus  | `abs ]
    and args = expr list[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : expr) -> ()
        let _ = fun (_ : op) -> ()
        let _ = fun (_ : args) -> ()
        include
          struct
            open
              struct
                let rec (quickcheck_generator_expr :
                  expr Ppx_quickcheck_runtime.Base_quickcheck.Generator.t
                    Ppx_quickcheck_runtime.Base.Lazy.t)
                  =
                  lazy
                    (let quickcheck_generator_expr =
                       Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                         quickcheck_generator_expr
                     and quickcheck_generator_op =
                       Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                         quickcheck_generator_op
                     and quickcheck_generator_args =
                       Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                         quickcheck_generator_args in
                     ignore quickcheck_generator_args;
                     ignore quickcheck_generator_op;
                     ignore quickcheck_generator_expr;
                     (let _pair__259_ =
                        (1.,
                          (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                             (fun ~size:_size__266_ ->
                                fun ~random:_random__267_ ->
                                  Constant
                                    (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                       quickcheck_generator_int64
                                       ~size:_size__266_
                                       ~random:_random__267_))))
                      and _pair__260_ =
                        (1.,
                          (Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                             Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                             ~f:(fun _size__256_ ->
                                   Ppx_quickcheck_runtime.Base_quickcheck.Generator.with_size
                                     ~size:(Ppx_quickcheck_runtime.Base.Int.pred
                                              _size__256_)
                                     (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                        (fun ~size:_size__262_ ->
                                           fun ~random:_random__263_ ->
                                             Operator
                                               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                  quickcheck_generator_op
                                                  ~size:_size__262_
                                                  ~random:_random__263_))))))
                      and _pair__261_ =
                        (1.,
                          (Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                             Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                             ~f:(fun _size__256_ ->
                                   Ppx_quickcheck_runtime.Base_quickcheck.Generator.with_size
                                     ~size:(Ppx_quickcheck_runtime.Base.Int.pred
                                              _size__256_)
                                     (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                        (fun ~size:_size__264_ ->
                                           fun ~random:_random__265_ ->
                                             Application
                                               ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                   quickcheck_generator_expr
                                                   ~size:_size__264_
                                                   ~random:_random__265_),
                                                 (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                    quickcheck_generator_args
                                                    ~size:_size__264_
                                                    ~random:_random__265_))))))) in
                      let _gen__257_ =
                        Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                          [_pair__259_]
                      and _gen__258_ =
                        Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                          [_pair__259_; _pair__260_; _pair__261_] in
                      Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                        Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                        ~f:(function | 0 -> _gen__257_ | _ -> _gen__258_)))
                and (quickcheck_generator_op :
                  op Ppx_quickcheck_runtime.Base_quickcheck.Generator.t
                    Ppx_quickcheck_runtime.Base.Lazy.t)
                  =
                  lazy
                    (let quickcheck_generator_expr =
                       Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                         quickcheck_generator_expr
                     and quickcheck_generator_op =
                       Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                         quickcheck_generator_op
                     and quickcheck_generator_args =
                       Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                         quickcheck_generator_args in
                     ignore quickcheck_generator_args;
                     ignore quickcheck_generator_op;
                     ignore quickcheck_generator_expr;
                     Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                       [(1.,
                          (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                             (fun ~size:_size__268_ ->
                                fun ~random:_random__269_ -> `plus)));
                       (1.,
                         (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                            (fun ~size:_size__270_ ->
                               fun ~random:_random__271_ -> `minus)));
                       (1.,
                         (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                            (fun ~size:_size__272_ ->
                               fun ~random:_random__273_ -> `abs)))])
                and (quickcheck_generator_args :
                  args Ppx_quickcheck_runtime.Base_quickcheck.Generator.t
                    Ppx_quickcheck_runtime.Base.Lazy.t)
                  =
                  lazy
                    (let quickcheck_generator_expr =
                       Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                         quickcheck_generator_expr
                     and quickcheck_generator_op =
                       Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                         quickcheck_generator_op
                     and quickcheck_generator_args =
                       Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                         quickcheck_generator_args in
                     ignore quickcheck_generator_args;
                     ignore quickcheck_generator_op;
                     ignore quickcheck_generator_expr;
                     quickcheck_generator_list quickcheck_generator_expr)
                let _ = quickcheck_generator_expr
                and _ = quickcheck_generator_op
                and _ = quickcheck_generator_args
              end
            let quickcheck_generator_expr =
              Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                quickcheck_generator_expr
            and quickcheck_generator_op =
              Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                quickcheck_generator_op
            and quickcheck_generator_args =
              Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                quickcheck_generator_args
            let _ = quickcheck_generator_expr
            and _ = quickcheck_generator_op
            and _ = quickcheck_generator_args
          end
        include
          struct
            open
              struct
                let rec (quickcheck_observer_expr :
                  expr Ppx_quickcheck_runtime.Base_quickcheck.Observer.t
                    Ppx_quickcheck_runtime.Base.Lazy.t)
                  =
                  lazy
                    (let quickcheck_observer_expr =
                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                         quickcheck_observer_expr
                     and quickcheck_observer_op =
                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                         quickcheck_observer_op
                     and quickcheck_observer_args =
                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                         quickcheck_observer_args in
                     ignore quickcheck_observer_args;
                     ignore quickcheck_observer_op;
                     ignore quickcheck_observer_expr;
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                       (fun _x__246_ ->
                          fun ~size:_size__247_ ->
                            fun ~hash:_hash__248_ ->
                              match _x__246_ with
                              | Constant _x__249_ ->
                                  let _hash__248_ =
                                    Ppx_quickcheck_runtime.Base.hash_fold_int
                                      _hash__248_ 0 in
                                  let _hash__248_ =
                                    Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                      quickcheck_observer_int64 _x__249_
                                      ~size:_size__247_ ~hash:_hash__248_ in
                                  _hash__248_
                              | Operator _x__250_ ->
                                  let _hash__248_ =
                                    Ppx_quickcheck_runtime.Base.hash_fold_int
                                      _hash__248_ 1 in
                                  let _hash__248_ =
                                    Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                      quickcheck_observer_op _x__250_
                                      ~size:_size__247_ ~hash:_hash__248_ in
                                  _hash__248_
                              | Application (_x__251_, _x__252_) ->
                                  let _hash__248_ =
                                    Ppx_quickcheck_runtime.Base.hash_fold_int
                                      _hash__248_ 2 in
                                  let _hash__248_ =
                                    Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                      quickcheck_observer_expr _x__251_
                                      ~size:_size__247_ ~hash:_hash__248_ in
                                  let _hash__248_ =
                                    Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                      quickcheck_observer_args _x__252_
                                      ~size:_size__247_ ~hash:_hash__248_ in
                                  _hash__248_))
                and (quickcheck_observer_op :
                  op Ppx_quickcheck_runtime.Base_quickcheck.Observer.t
                    Ppx_quickcheck_runtime.Base.Lazy.t)
                  =
                  lazy
                    (let quickcheck_observer_expr =
                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                         quickcheck_observer_expr
                     and quickcheck_observer_op =
                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                         quickcheck_observer_op
                     and quickcheck_observer_args =
                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                         quickcheck_observer_args in
                     ignore quickcheck_observer_args;
                     ignore quickcheck_observer_op;
                     ignore quickcheck_observer_expr;
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                       (fun _x__253_ ->
                          fun ~size:_size__254_ ->
                            fun ~hash:_hash__255_ ->
                              match _x__253_ with
                              | `plus ->
                                  let _hash__255_ =
                                    Ppx_quickcheck_runtime.Base.hash_fold_int
                                      _hash__255_ (-900055206) in
                                  _hash__255_
                              | `minus ->
                                  let _hash__255_ =
                                    Ppx_quickcheck_runtime.Base.hash_fold_int
                                      _hash__255_ 141066352 in
                                  _hash__255_
                              | `abs ->
                                  let _hash__255_ =
                                    Ppx_quickcheck_runtime.Base.hash_fold_int
                                      _hash__255_ 4845682 in
                                  _hash__255_))
                and (quickcheck_observer_args :
                  args Ppx_quickcheck_runtime.Base_quickcheck.Observer.t
                    Ppx_quickcheck_runtime.Base.Lazy.t)
                  =
                  lazy
                    (let quickcheck_observer_expr =
                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                         quickcheck_observer_expr
                     and quickcheck_observer_op =
                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                         quickcheck_observer_op
                     and quickcheck_observer_args =
                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                         quickcheck_observer_args in
                     ignore quickcheck_observer_args;
                     ignore quickcheck_observer_op;
                     ignore quickcheck_observer_expr;
                     quickcheck_observer_list quickcheck_observer_expr)
                let _ = quickcheck_observer_expr
                and _ = quickcheck_observer_op
                and _ = quickcheck_observer_args
              end
            let quickcheck_observer_expr =
              Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                quickcheck_observer_expr
            and quickcheck_observer_op =
              Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                quickcheck_observer_op
            and quickcheck_observer_args =
              Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                quickcheck_observer_args
            let _ = quickcheck_observer_expr
            and _ = quickcheck_observer_op
            and _ = quickcheck_observer_args
          end
        include
          struct
            open
              struct
                let rec (quickcheck_shrinker_expr :
                  expr Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.t
                    Ppx_quickcheck_runtime.Base.Lazy.t)
                  =
                  lazy
                    (let quickcheck_shrinker_expr =
                       Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                         quickcheck_shrinker_expr
                     and quickcheck_shrinker_op =
                       Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                         quickcheck_shrinker_op
                     and quickcheck_shrinker_args =
                       Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                         quickcheck_shrinker_args in
                     ignore quickcheck_shrinker_args;
                     ignore quickcheck_shrinker_op;
                     ignore quickcheck_shrinker_expr;
                     Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                       (function
                        | Constant _x__242_ ->
                            Ppx_quickcheck_runtime.Base.Sequence.round_robin
                              [Ppx_quickcheck_runtime.Base.Sequence.map
                                 (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                    quickcheck_shrinker_int64 _x__242_)
                                 ~f:(fun _x__242_ -> Constant _x__242_)]
                        | Operator _x__243_ ->
                            Ppx_quickcheck_runtime.Base.Sequence.round_robin
                              [Ppx_quickcheck_runtime.Base.Sequence.map
                                 (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                    quickcheck_shrinker_op _x__243_)
                                 ~f:(fun _x__243_ -> Operator _x__243_)]
                        | Application (_x__244_, _x__245_) ->
                            Ppx_quickcheck_runtime.Base.Sequence.round_robin
                              [Ppx_quickcheck_runtime.Base.Sequence.map
                                 (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                    quickcheck_shrinker_expr _x__244_)
                                 ~f:(fun _x__244_ ->
                                       Application (_x__244_, _x__245_));
                              Ppx_quickcheck_runtime.Base.Sequence.map
                                (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                   quickcheck_shrinker_args _x__245_)
                                ~f:(fun _x__245_ ->
                                      Application (_x__244_, _x__245_))]))
                and (quickcheck_shrinker_op :
                  op Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.t
                    Ppx_quickcheck_runtime.Base.Lazy.t)
                  =
                  lazy
                    (let quickcheck_shrinker_expr =
                       Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                         quickcheck_shrinker_expr
                     and quickcheck_shrinker_op =
                       Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                         quickcheck_shrinker_op
                     and quickcheck_shrinker_args =
                       Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                         quickcheck_shrinker_args in
                     ignore quickcheck_shrinker_args;
                     ignore quickcheck_shrinker_op;
                     ignore quickcheck_shrinker_expr;
                     Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                       (function
                        | `plus ->
                            Ppx_quickcheck_runtime.Base.Sequence.round_robin
                              []
                        | `minus ->
                            Ppx_quickcheck_runtime.Base.Sequence.round_robin
                              []
                        | `abs ->
                            Ppx_quickcheck_runtime.Base.Sequence.round_robin
                              []))
                and (quickcheck_shrinker_args :
                  args Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.t
                    Ppx_quickcheck_runtime.Base.Lazy.t)
                  =
                  lazy
                    (let quickcheck_shrinker_expr =
                       Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                         quickcheck_shrinker_expr
                     and quickcheck_shrinker_op =
                       Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                         quickcheck_shrinker_op
                     and quickcheck_shrinker_args =
                       Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                         quickcheck_shrinker_args in
                     ignore quickcheck_shrinker_args;
                     ignore quickcheck_shrinker_op;
                     ignore quickcheck_shrinker_expr;
                     quickcheck_shrinker_list quickcheck_shrinker_expr)
                let _ = quickcheck_shrinker_expr
                and _ = quickcheck_shrinker_op
                and _ = quickcheck_shrinker_args
              end
            let quickcheck_shrinker_expr =
              Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                quickcheck_shrinker_expr
            and quickcheck_shrinker_op =
              Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                quickcheck_shrinker_op
            and quickcheck_shrinker_args =
              Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                quickcheck_shrinker_args
            let _ = quickcheck_shrinker_expr
            and _ = quickcheck_shrinker_op
            and _ = quickcheck_shrinker_args
          end
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Poly_recursive =
  struct
    type 'a t =
      | Zero 
      | Succ of 'a * 'a t [@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : 'a t) -> ()
        include
          struct
            open
              struct
                let rec quickcheck_generator :
                  'a .
                    ('a Ppx_quickcheck_runtime.Base_quickcheck.Generator.t ->
                       'a t
                         Ppx_quickcheck_runtime.Base_quickcheck.Generator.t)
                      Ppx_quickcheck_runtime.Base.Lazy.t
                  =
                  lazy
                    (fun _generator__287_ ->
                       let quickcheck_generator _recur__297_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                           (lazy
                              (Ppx_quickcheck_runtime.Base.Lazy.force
                                 quickcheck_generator _recur__297_)) in
                       ignore quickcheck_generator;
                       (let _pair__291_ =
                          (1.,
                            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                               (fun ~size:_size__295_ ->
                                  fun ~random:_random__296_ -> Zero)))
                        and _pair__292_ =
                          (1.,
                            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                               Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                               ~f:(fun _size__288_ ->
                                     Ppx_quickcheck_runtime.Base_quickcheck.Generator.with_size
                                       ~size:(Ppx_quickcheck_runtime.Base.Int.pred
                                                _size__288_)
                                       (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                          (fun ~size:_size__293_ ->
                                             fun ~random:_random__294_ ->
                                               Succ
                                                 ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                     _generator__287_
                                                     ~size:_size__293_
                                                     ~random:_random__294_),
                                                   (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                      (quickcheck_generator
                                                         _generator__287_)
                                                      ~size:_size__293_
                                                      ~random:_random__294_))))))) in
                        let _gen__289_ =
                          Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                            [_pair__291_]
                        and _gen__290_ =
                          Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                            [_pair__291_; _pair__292_] in
                        Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                          Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                          ~f:(function | 0 -> _gen__289_ | _ -> _gen__290_)))
                let _ = quickcheck_generator
              end
            let quickcheck_generator _recur__298_ =
              Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                (lazy
                   (Ppx_quickcheck_runtime.Base.Lazy.force
                      quickcheck_generator _recur__298_))
            let _ = quickcheck_generator
          end
        include
          struct
            open
              struct
                let rec quickcheck_observer :
                  'a .
                    ('a Ppx_quickcheck_runtime.Base_quickcheck.Observer.t ->
                       'a t Ppx_quickcheck_runtime.Base_quickcheck.Observer.t)
                      Ppx_quickcheck_runtime.Base.Lazy.t
                  =
                  lazy
                    (fun _observer__279_ ->
                       let quickcheck_observer _recur__285_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                           (lazy
                              (Ppx_quickcheck_runtime.Base.Lazy.force
                                 quickcheck_observer _recur__285_)) in
                       ignore quickcheck_observer;
                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                         (fun _x__280_ ->
                            fun ~size:_size__281_ ->
                              fun ~hash:_hash__282_ ->
                                match _x__280_ with
                                | Zero ->
                                    let _hash__282_ =
                                      Ppx_quickcheck_runtime.Base.hash_fold_int
                                        _hash__282_ 0 in
                                    _hash__282_
                                | Succ (_x__283_, _x__284_) ->
                                    let _hash__282_ =
                                      Ppx_quickcheck_runtime.Base.hash_fold_int
                                        _hash__282_ 1 in
                                    let _hash__282_ =
                                      Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                        _observer__279_ _x__283_
                                        ~size:_size__281_ ~hash:_hash__282_ in
                                    let _hash__282_ =
                                      Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                        (quickcheck_observer _observer__279_)
                                        _x__284_ ~size:_size__281_
                                        ~hash:_hash__282_ in
                                    _hash__282_))
                let _ = quickcheck_observer
              end
            let quickcheck_observer _recur__286_ =
              Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                (lazy
                   (Ppx_quickcheck_runtime.Base.Lazy.force
                      quickcheck_observer _recur__286_))
            let _ = quickcheck_observer
          end
        include
          struct
            open
              struct
                let rec quickcheck_shrinker :
                  'a .
                    ('a Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.t ->
                       'a t Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.t)
                      Ppx_quickcheck_runtime.Base.Lazy.t
                  =
                  lazy
                    (fun _shrinker__274_ ->
                       let quickcheck_shrinker _recur__277_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                           (lazy
                              (Ppx_quickcheck_runtime.Base.Lazy.force
                                 quickcheck_shrinker _recur__277_)) in
                       ignore quickcheck_shrinker;
                       Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                         (function
                          | Zero ->
                              Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                []
                          | Succ (_x__275_, _x__276_) ->
                              Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                [Ppx_quickcheck_runtime.Base.Sequence.map
                                   (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                      _shrinker__274_ _x__275_)
                                   ~f:(fun _x__275_ ->
                                         Succ (_x__275_, _x__276_));
                                Ppx_quickcheck_runtime.Base.Sequence.map
                                  (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                     (quickcheck_shrinker _shrinker__274_)
                                     _x__276_)
                                  ~f:(fun _x__276_ ->
                                        Succ (_x__275_, _x__276_))]))
                let _ = quickcheck_shrinker
              end
            let quickcheck_shrinker _recur__278_ =
              Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                (lazy
                   (Ppx_quickcheck_runtime.Base.Lazy.force
                      quickcheck_shrinker _recur__278_))
            let _ = quickcheck_shrinker
          end
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Instance_of_recursive =
  struct
    type t = bool Poly_recursive.t[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Poly_recursive.quickcheck_generator quickcheck_generator_bool
        let _ = quickcheck_generator
        let quickcheck_observer =
          Poly_recursive.quickcheck_observer quickcheck_observer_bool
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Poly_recursive.quickcheck_shrinker quickcheck_shrinker_bool
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Murec_poly_mono =
  struct
    type t =
      | Leaf of bool 
      | Node of t node 
    and 'a node = 'a list[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let _ = fun (_ : 'a node) -> ()
        include
          struct
            open
              struct
                let rec (quickcheck_generator :
                  t Ppx_quickcheck_runtime.Base_quickcheck.Generator.t
                    Ppx_quickcheck_runtime.Base.Lazy.t)
                  =
                  lazy
                    (let quickcheck_generator =
                       Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                         quickcheck_generator
                     and quickcheck_generator_node _recur__322_ =
                       Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                         (lazy
                            (Ppx_quickcheck_runtime.Base.Lazy.force
                               quickcheck_generator_node _recur__322_)) in
                     ignore quickcheck_generator_node;
                     ignore quickcheck_generator;
                     (let _pair__315_ =
                        (1.,
                          (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                             (fun ~size:_size__319_ ->
                                fun ~random:_random__320_ ->
                                  Leaf
                                    (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                       quickcheck_generator_bool
                                       ~size:_size__319_
                                       ~random:_random__320_))))
                      and _pair__316_ =
                        (1.,
                          (Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                             Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                             ~f:(fun _size__312_ ->
                                   Ppx_quickcheck_runtime.Base_quickcheck.Generator.with_size
                                     ~size:(Ppx_quickcheck_runtime.Base.Int.pred
                                              _size__312_)
                                     (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                        (fun ~size:_size__317_ ->
                                           fun ~random:_random__318_ ->
                                             Node
                                               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                  (quickcheck_generator_node
                                                     quickcheck_generator)
                                                  ~size:_size__317_
                                                  ~random:_random__318_)))))) in
                      let _gen__313_ =
                        Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                          [_pair__315_]
                      and _gen__314_ =
                        Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                          [_pair__315_; _pair__316_] in
                      Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                        Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                        ~f:(function | 0 -> _gen__313_ | _ -> _gen__314_)))
                and quickcheck_generator_node :
                  'a .
                    ('a Ppx_quickcheck_runtime.Base_quickcheck.Generator.t ->
                       'a node
                         Ppx_quickcheck_runtime.Base_quickcheck.Generator.t)
                      Ppx_quickcheck_runtime.Base.Lazy.t
                  =
                  lazy
                    (fun _generator__321_ ->
                       let quickcheck_generator =
                         Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                           quickcheck_generator
                       and quickcheck_generator_node _recur__322_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                           (lazy
                              (Ppx_quickcheck_runtime.Base.Lazy.force
                                 quickcheck_generator_node _recur__322_)) in
                       ignore quickcheck_generator_node;
                       ignore quickcheck_generator;
                       quickcheck_generator_list _generator__321_)
                let _ = quickcheck_generator
                and _ = quickcheck_generator_node
              end
            let quickcheck_generator =
              Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                quickcheck_generator
            and quickcheck_generator_node _recur__323_ =
              Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                (lazy
                   (Ppx_quickcheck_runtime.Base.Lazy.force
                      quickcheck_generator_node _recur__323_))
            let _ = quickcheck_generator
            and _ = quickcheck_generator_node
          end
        include
          struct
            open
              struct
                let rec (quickcheck_observer :
                  t Ppx_quickcheck_runtime.Base_quickcheck.Observer.t
                    Ppx_quickcheck_runtime.Base.Lazy.t)
                  =
                  lazy
                    (let quickcheck_observer =
                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                         quickcheck_observer
                     and quickcheck_observer_node _recur__310_ =
                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                         (lazy
                            (Ppx_quickcheck_runtime.Base.Lazy.force
                               quickcheck_observer_node _recur__310_)) in
                     ignore quickcheck_observer_node;
                     ignore quickcheck_observer;
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                       (fun _x__304_ ->
                          fun ~size:_size__305_ ->
                            fun ~hash:_hash__306_ ->
                              match _x__304_ with
                              | Leaf _x__307_ ->
                                  let _hash__306_ =
                                    Ppx_quickcheck_runtime.Base.hash_fold_int
                                      _hash__306_ 0 in
                                  let _hash__306_ =
                                    Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                      quickcheck_observer_bool _x__307_
                                      ~size:_size__305_ ~hash:_hash__306_ in
                                  _hash__306_
                              | Node _x__308_ ->
                                  let _hash__306_ =
                                    Ppx_quickcheck_runtime.Base.hash_fold_int
                                      _hash__306_ 1 in
                                  let _hash__306_ =
                                    Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                      (quickcheck_observer_node
                                         quickcheck_observer) _x__308_
                                      ~size:_size__305_ ~hash:_hash__306_ in
                                  _hash__306_))
                and quickcheck_observer_node :
                  'a .
                    ('a Ppx_quickcheck_runtime.Base_quickcheck.Observer.t ->
                       'a node
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.t)
                      Ppx_quickcheck_runtime.Base.Lazy.t
                  =
                  lazy
                    (fun _observer__309_ ->
                       let quickcheck_observer =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                           quickcheck_observer
                       and quickcheck_observer_node _recur__310_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                           (lazy
                              (Ppx_quickcheck_runtime.Base.Lazy.force
                                 quickcheck_observer_node _recur__310_)) in
                       ignore quickcheck_observer_node;
                       ignore quickcheck_observer;
                       quickcheck_observer_list _observer__309_)
                let _ = quickcheck_observer
                and _ = quickcheck_observer_node
              end
            let quickcheck_observer =
              Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                quickcheck_observer
            and quickcheck_observer_node _recur__311_ =
              Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                (lazy
                   (Ppx_quickcheck_runtime.Base.Lazy.force
                      quickcheck_observer_node _recur__311_))
            let _ = quickcheck_observer
            and _ = quickcheck_observer_node
          end
        include
          struct
            open
              struct
                let rec (quickcheck_shrinker :
                  t Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.t
                    Ppx_quickcheck_runtime.Base.Lazy.t)
                  =
                  lazy
                    (let quickcheck_shrinker =
                       Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                         quickcheck_shrinker
                     and quickcheck_shrinker_node _recur__302_ =
                       Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                         (lazy
                            (Ppx_quickcheck_runtime.Base.Lazy.force
                               quickcheck_shrinker_node _recur__302_)) in
                     ignore quickcheck_shrinker_node;
                     ignore quickcheck_shrinker;
                     Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                       (function
                        | Leaf _x__299_ ->
                            Ppx_quickcheck_runtime.Base.Sequence.round_robin
                              [Ppx_quickcheck_runtime.Base.Sequence.map
                                 (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                    quickcheck_shrinker_bool _x__299_)
                                 ~f:(fun _x__299_ -> Leaf _x__299_)]
                        | Node _x__300_ ->
                            Ppx_quickcheck_runtime.Base.Sequence.round_robin
                              [Ppx_quickcheck_runtime.Base.Sequence.map
                                 (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                    (quickcheck_shrinker_node
                                       quickcheck_shrinker) _x__300_)
                                 ~f:(fun _x__300_ -> Node _x__300_)]))
                and quickcheck_shrinker_node :
                  'a .
                    ('a Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.t ->
                       'a node
                         Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.t)
                      Ppx_quickcheck_runtime.Base.Lazy.t
                  =
                  lazy
                    (fun _shrinker__301_ ->
                       let quickcheck_shrinker =
                         Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                           quickcheck_shrinker
                       and quickcheck_shrinker_node _recur__302_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                           (lazy
                              (Ppx_quickcheck_runtime.Base.Lazy.force
                                 quickcheck_shrinker_node _recur__302_)) in
                       ignore quickcheck_shrinker_node;
                       ignore quickcheck_shrinker;
                       quickcheck_shrinker_list _shrinker__301_)
                let _ = quickcheck_shrinker
                and _ = quickcheck_shrinker_node
              end
            let quickcheck_shrinker =
              Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                quickcheck_shrinker
            and quickcheck_shrinker_node _recur__303_ =
              Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                (lazy
                   (Ppx_quickcheck_runtime.Base.Lazy.force
                      quickcheck_shrinker_node _recur__303_))
            let _ = quickcheck_shrinker
            and _ = quickcheck_shrinker_node
          end
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Polymorphic_recursion =
  struct
    type 'a t =
      | Single of 'a 
      | Double of ('a * 'a) t [@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : 'a t) -> ()
        include
          struct
            open
              struct
                let rec quickcheck_generator :
                  'a .
                    ('a Ppx_quickcheck_runtime.Base_quickcheck.Generator.t ->
                       'a t
                         Ppx_quickcheck_runtime.Base_quickcheck.Generator.t)
                      Ppx_quickcheck_runtime.Base.Lazy.t
                  =
                  lazy
                    (fun _generator__344_ ->
                       let quickcheck_generator _recur__356_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                           (lazy
                              (Ppx_quickcheck_runtime.Base.Lazy.force
                                 quickcheck_generator _recur__356_)) in
                       ignore quickcheck_generator;
                       (let _pair__348_ =
                          (1.,
                            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                               (fun ~size:_size__354_ ->
                                  fun ~random:_random__355_ ->
                                    Single
                                      (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                         _generator__344_ ~size:_size__354_
                                         ~random:_random__355_))))
                        and _pair__349_ =
                          (1.,
                            (Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                               Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                               ~f:(fun _size__345_ ->
                                     Ppx_quickcheck_runtime.Base_quickcheck.Generator.with_size
                                       ~size:(Ppx_quickcheck_runtime.Base.Int.pred
                                                _size__345_)
                                       (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                          (fun ~size:_size__352_ ->
                                             fun ~random:_random__353_ ->
                                               Double
                                                 (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                    (quickcheck_generator
                                                       (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                                          (fun
                                                             ~size:_size__350_
                                                             ->
                                                             fun
                                                               ~random:_random__351_
                                                               ->
                                                               ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                                   _generator__344_
                                                                   ~size:_size__350_
                                                                   ~random:_random__351_),
                                                                 (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                                    _generator__344_
                                                                    ~size:_size__350_
                                                                    ~random:_random__351_)))))
                                                    ~size:_size__352_
                                                    ~random:_random__353_)))))) in
                        let _gen__346_ =
                          Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                            [_pair__348_]
                        and _gen__347_ =
                          Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                            [_pair__348_; _pair__349_] in
                        Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                          Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                          ~f:(function | 0 -> _gen__346_ | _ -> _gen__347_)))
                let _ = quickcheck_generator
              end
            let quickcheck_generator _recur__357_ =
              Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                (lazy
                   (Ppx_quickcheck_runtime.Base.Lazy.force
                      quickcheck_generator _recur__357_))
            let _ = quickcheck_generator
          end
        include
          struct
            open
              struct
                let rec quickcheck_observer :
                  'a .
                    ('a Ppx_quickcheck_runtime.Base_quickcheck.Observer.t ->
                       'a t Ppx_quickcheck_runtime.Base_quickcheck.Observer.t)
                      Ppx_quickcheck_runtime.Base.Lazy.t
                  =
                  lazy
                    (fun _observer__331_ ->
                       let quickcheck_observer _recur__342_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                           (lazy
                              (Ppx_quickcheck_runtime.Base.Lazy.force
                                 quickcheck_observer _recur__342_)) in
                       ignore quickcheck_observer;
                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                         (fun _x__332_ ->
                            fun ~size:_size__333_ ->
                              fun ~hash:_hash__334_ ->
                                match _x__332_ with
                                | Single _x__335_ ->
                                    let _hash__334_ =
                                      Ppx_quickcheck_runtime.Base.hash_fold_int
                                        _hash__334_ 0 in
                                    let _hash__334_ =
                                      Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                        _observer__331_ _x__335_
                                        ~size:_size__333_ ~hash:_hash__334_ in
                                    _hash__334_
                                | Double _x__341_ ->
                                    let _hash__334_ =
                                      Ppx_quickcheck_runtime.Base.hash_fold_int
                                        _hash__334_ 1 in
                                    let _hash__334_ =
                                      Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                        (quickcheck_observer
                                           (Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                                              (fun _x__336_ ->
                                                 fun ~size:_size__339_ ->
                                                   fun ~hash:_hash__340_ ->
                                                     let (_x__337_, _x__338_)
                                                       = _x__336_ in
                                                     let _hash__340_ =
                                                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                                         _observer__331_
                                                         _x__337_
                                                         ~size:_size__339_
                                                         ~hash:_hash__340_ in
                                                     let _hash__340_ =
                                                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                                         _observer__331_
                                                         _x__338_
                                                         ~size:_size__339_
                                                         ~hash:_hash__340_ in
                                                     _hash__340_))) _x__341_
                                        ~size:_size__333_ ~hash:_hash__334_ in
                                    _hash__334_))
                let _ = quickcheck_observer
              end
            let quickcheck_observer _recur__343_ =
              Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                (lazy
                   (Ppx_quickcheck_runtime.Base.Lazy.force
                      quickcheck_observer _recur__343_))
            let _ = quickcheck_observer
          end
        include
          struct
            open
              struct
                let rec quickcheck_shrinker :
                  'a .
                    ('a Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.t ->
                       'a t Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.t)
                      Ppx_quickcheck_runtime.Base.Lazy.t
                  =
                  lazy
                    (fun _shrinker__324_ ->
                       let quickcheck_shrinker _recur__329_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                           (lazy
                              (Ppx_quickcheck_runtime.Base.Lazy.force
                                 quickcheck_shrinker _recur__329_)) in
                       ignore quickcheck_shrinker;
                       Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                         (function
                          | Single _x__325_ ->
                              Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                [Ppx_quickcheck_runtime.Base.Sequence.map
                                   (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                      _shrinker__324_ _x__325_)
                                   ~f:(fun _x__325_ -> Single _x__325_)]
                          | Double _x__326_ ->
                              Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                [Ppx_quickcheck_runtime.Base.Sequence.map
                                   (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                      (quickcheck_shrinker
                                         (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                                            (fun (_x__327_, _x__328_) ->
                                               Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                                 [Ppx_quickcheck_runtime.Base.Sequence.map
                                                    (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                                       _shrinker__324_
                                                       _x__327_)
                                                    ~f:(fun _x__327_ ->
                                                          (_x__327_,
                                                            _x__328_));
                                                 Ppx_quickcheck_runtime.Base.Sequence.map
                                                   (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                                      _shrinker__324_
                                                      _x__328_)
                                                   ~f:(fun _x__328_ ->
                                                         (_x__327_, _x__328_))])))
                                      _x__326_)
                                   ~f:(fun _x__326_ -> Double _x__326_)]))
                let _ = quickcheck_shrinker
              end
            let quickcheck_shrinker _recur__330_ =
              Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                (lazy
                   (Ppx_quickcheck_runtime.Base.Lazy.force
                      quickcheck_shrinker _recur__330_))
            let _ = quickcheck_shrinker
          end
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Extensions =
  struct
    type t = [ `A  | `B of (bool * unit option) ]
    let quickcheck_generator =
      Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
        [(1.,
           (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
              (fun ~size:_size__358_ -> fun ~random:_random__359_ -> `A)));
        (1.,
          (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
             (fun ~size:_size__362_ ->
                fun ~random:_random__363_ ->
                  `B
                    (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                       (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                          (fun ~size:_size__360_ ->
                             fun ~random:_random__361_ ->
                               ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                   quickcheck_generator_bool
                                   ~size:_size__360_ ~random:_random__361_),
                                 (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                    (quickcheck_generator_option
                                       quickcheck_generator_unit)
                                    ~size:_size__360_ ~random:_random__361_))))
                       ~size:_size__362_ ~random:_random__363_))))]
    let quickcheck_observer =
      Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
        (fun _x__364_ ->
           fun ~size:_size__365_ ->
             fun ~hash:_hash__366_ ->
               match _x__364_ with
               | `A ->
                   let _hash__366_ =
                     Ppx_quickcheck_runtime.Base.hash_fold_int _hash__366_ 65 in
                   _hash__366_
               | `B _x__372_ ->
                   let _hash__366_ =
                     Ppx_quickcheck_runtime.Base.hash_fold_int _hash__366_ 66 in
                   let _hash__366_ =
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                       (Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                          (fun _x__367_ ->
                             fun ~size:_size__370_ ->
                               fun ~hash:_hash__371_ ->
                                 let (_x__368_, _x__369_) = _x__367_ in
                                 let _hash__371_ =
                                   Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                     quickcheck_observer_bool _x__368_
                                     ~size:_size__370_ ~hash:_hash__371_ in
                                 let _hash__371_ =
                                   Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                     (quickcheck_observer_option
                                        quickcheck_observer_unit) _x__369_
                                     ~size:_size__370_ ~hash:_hash__371_ in
                                 _hash__371_)) _x__372_ ~size:_size__365_
                       ~hash:_hash__366_ in
                   _hash__366_)
    let quickcheck_shrinker =
      Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
        (function
         | `A -> Ppx_quickcheck_runtime.Base.Sequence.round_robin []
         | `B _x__373_ ->
             Ppx_quickcheck_runtime.Base.Sequence.round_robin
               [Ppx_quickcheck_runtime.Base.Sequence.map
                  (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                     (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                        (fun (_x__374_, _x__375_) ->
                           Ppx_quickcheck_runtime.Base.Sequence.round_robin
                             [Ppx_quickcheck_runtime.Base.Sequence.map
                                (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                   quickcheck_shrinker_bool _x__374_)
                                ~f:(fun _x__374_ -> (_x__374_, _x__375_));
                             Ppx_quickcheck_runtime.Base.Sequence.map
                               (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                  (quickcheck_shrinker_option
                                     quickcheck_shrinker_unit) _x__375_)
                               ~f:(fun _x__375_ -> (_x__374_, _x__375_))]))
                     _x__373_) ~f:(fun _x__373_ -> `B _x__373_)])
  end
module Escaped =
  struct
    type t = (int * char * bool option)
    let quickcheck_generator =
      Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
        (fun ~size:_size__376_ ->
           fun ~random:_random__377_ ->
             ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                 Generator.small_strictly_positive_int ~size:_size__376_
                 ~random:_random__377_),
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                  quickcheck_generator_char ~size:_size__376_
                  ~random:_random__377_),
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                  (quickcheck_generator_option quickcheck_generator_bool)
                  ~size:_size__376_ ~random:_random__377_)))
    let quickcheck_observer =
      Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
        (fun _x__378_ ->
           fun ~size:_size__382_ ->
             fun ~hash:_hash__383_ ->
               let (_x__379_, _x__380_, _x__381_) = _x__378_ in
               let _hash__383_ =
                 Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                   quickcheck_observer_int _x__379_ ~size:_size__382_
                   ~hash:_hash__383_ in
               let _hash__383_ =
                 Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                   Observer.opaque _x__380_ ~size:_size__382_
                   ~hash:_hash__383_ in
               let _hash__383_ =
                 Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                   (quickcheck_observer_option quickcheck_observer_bool)
                   _x__381_ ~size:_size__382_ ~hash:_hash__383_ in
               _hash__383_)
    let quickcheck_shrinker =
      Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
        (fun (_x__384_, _x__385_, _x__386_) ->
           Ppx_quickcheck_runtime.Base.Sequence.round_robin
             [Ppx_quickcheck_runtime.Base.Sequence.map
                (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                   quickcheck_shrinker_int _x__384_)
                ~f:(fun _x__384_ -> (_x__384_, _x__385_, _x__386_));
             Ppx_quickcheck_runtime.Base.Sequence.map
               (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                  quickcheck_shrinker_char _x__385_)
               ~f:(fun _x__385_ -> (_x__384_, _x__385_, _x__386_));
             Ppx_quickcheck_runtime.Base.Sequence.map
               (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                  Shrinker.atomic _x__386_)
               ~f:(fun _x__386_ -> (_x__384_, _x__385_, _x__386_))])
  end
module Wildcard(Elt:sig type t val examples : t list end) =
  struct
    type t = Elt.t list
    let quickcheck_generator =
      Generator.list (Generator.of_list Elt.examples)
    let quickcheck_observer : t Observer.t =
      quickcheck_observer_list
        Ppx_quickcheck_runtime.Base_quickcheck.Observer.opaque
    let quickcheck_shrinker : t Shrinker.t =
      quickcheck_shrinker_list
        Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.atomic
  end
module Attribute_override =
  struct
    type t =
      | Null [@quickcheck.weight 0.1]
      | Text of
      ((string)[@quickcheck.generator
                 Generator.string_of Generator.char_lowercase])
      
      | Number of
      ((float)[@quickcheck.generator Generator.float_strictly_positive]) 
    [@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
            [(0.1,
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                  (fun ~size:_size__394_ -> fun ~random:_random__395_ -> Null)));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__396_ ->
                    fun ~random:_random__397_ ->
                      Text
                        (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                           (Generator.string_of Generator.char_lowercase)
                           ~size:_size__396_ ~random:_random__397_))));
            (1.,
              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                 (fun ~size:_size__398_ ->
                    fun ~random:_random__399_ ->
                      Number
                        (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                           Generator.float_strictly_positive
                           ~size:_size__398_ ~random:_random__399_))))]
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun _x__389_ ->
               fun ~size:_size__390_ ->
                 fun ~hash:_hash__391_ ->
                   match _x__389_ with
                   | Null ->
                       let _hash__391_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__391_ 0 in
                       _hash__391_
                   | Text _x__392_ ->
                       let _hash__391_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__391_ 1 in
                       let _hash__391_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_string _x__392_
                           ~size:_size__390_ ~hash:_hash__391_ in
                       _hash__391_
                   | Number _x__393_ ->
                       let _hash__391_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__391_ 2 in
                       let _hash__391_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_float _x__393_
                           ~size:_size__390_ ~hash:_hash__391_ in
                       _hash__391_)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (function
             | Null -> Ppx_quickcheck_runtime.Base.Sequence.round_robin []
             | Text _x__387_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         quickcheck_shrinker_string _x__387_)
                      ~f:(fun _x__387_ -> Text _x__387_)]
             | Number _x__388_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         quickcheck_shrinker_float _x__388_)
                      ~f:(fun _x__388_ -> Number _x__388_)])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Attribute_override_recursive =
  struct
    type t =
      | Leaf 
      | Node1 of t * int64 * t [@quickcheck.weight 0.5]
      | Node2 of t * int64 * t * int64 * t [@quickcheck.weight 0.25][@@deriving
                                                                    quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        include
          struct
            open
              struct
                let rec (quickcheck_generator :
                  t Ppx_quickcheck_runtime.Base_quickcheck.Generator.t
                    Ppx_quickcheck_runtime.Base.Lazy.t)
                  =
                  lazy
                    (let quickcheck_generator =
                       Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                         quickcheck_generator in
                     ignore quickcheck_generator;
                     (let _pair__422_ =
                        (1.,
                          (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                             (fun ~size:_size__429_ ->
                                fun ~random:_random__430_ -> Leaf)))
                      and _pair__423_ =
                        (0.5,
                          (Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                             Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                             ~f:(fun _size__419_ ->
                                   Ppx_quickcheck_runtime.Base_quickcheck.Generator.with_size
                                     ~size:(Ppx_quickcheck_runtime.Base.Int.pred
                                              _size__419_)
                                     (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                        (fun ~size:_size__425_ ->
                                           fun ~random:_random__426_ ->
                                             Node1
                                               ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                   quickcheck_generator
                                                   ~size:_size__425_
                                                   ~random:_random__426_),
                                                 (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                    quickcheck_generator_int64
                                                    ~size:_size__425_
                                                    ~random:_random__426_),
                                                 (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                    quickcheck_generator
                                                    ~size:_size__425_
                                                    ~random:_random__426_)))))))
                      and _pair__424_ =
                        (0.25,
                          (Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                             Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                             ~f:(fun _size__419_ ->
                                   Ppx_quickcheck_runtime.Base_quickcheck.Generator.with_size
                                     ~size:(Ppx_quickcheck_runtime.Base.Int.pred
                                              _size__419_)
                                     (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                        (fun ~size:_size__427_ ->
                                           fun ~random:_random__428_ ->
                                             Node2
                                               ((Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                   quickcheck_generator
                                                   ~size:_size__427_
                                                   ~random:_random__428_),
                                                 (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                    quickcheck_generator_int64
                                                    ~size:_size__427_
                                                    ~random:_random__428_),
                                                 (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                    quickcheck_generator
                                                    ~size:_size__427_
                                                    ~random:_random__428_),
                                                 (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                    quickcheck_generator_int64
                                                    ~size:_size__427_
                                                    ~random:_random__428_),
                                                 (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                                    quickcheck_generator
                                                    ~size:_size__427_
                                                    ~random:_random__428_))))))) in
                      let _gen__420_ =
                        Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                          [_pair__422_]
                      and _gen__421_ =
                        Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                          [_pair__422_; _pair__423_; _pair__424_] in
                      Ppx_quickcheck_runtime.Base_quickcheck.Generator.bind
                        Ppx_quickcheck_runtime.Base_quickcheck.Generator.size
                        ~f:(function | 0 -> _gen__420_ | _ -> _gen__421_)))
                let _ = quickcheck_generator
              end
            let quickcheck_generator =
              Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                quickcheck_generator
            let _ = quickcheck_generator
          end
        include
          struct
            open
              struct
                let rec (quickcheck_observer :
                  t Ppx_quickcheck_runtime.Base_quickcheck.Observer.t
                    Ppx_quickcheck_runtime.Base.Lazy.t)
                  =
                  lazy
                    (let quickcheck_observer =
                       Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                         quickcheck_observer in
                     ignore quickcheck_observer;
                     Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                       (fun _x__408_ ->
                          fun ~size:_size__409_ ->
                            fun ~hash:_hash__410_ ->
                              match _x__408_ with
                              | Leaf ->
                                  let _hash__410_ =
                                    Ppx_quickcheck_runtime.Base.hash_fold_int
                                      _hash__410_ 0 in
                                  _hash__410_
                              | Node1 (_x__411_, _x__412_, _x__413_) ->
                                  let _hash__410_ =
                                    Ppx_quickcheck_runtime.Base.hash_fold_int
                                      _hash__410_ 1 in
                                  let _hash__410_ =
                                    Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                      quickcheck_observer _x__411_
                                      ~size:_size__409_ ~hash:_hash__410_ in
                                  let _hash__410_ =
                                    Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                      quickcheck_observer_int64 _x__412_
                                      ~size:_size__409_ ~hash:_hash__410_ in
                                  let _hash__410_ =
                                    Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                      quickcheck_observer _x__413_
                                      ~size:_size__409_ ~hash:_hash__410_ in
                                  _hash__410_
                              | Node2
                                  (_x__414_, _x__415_, _x__416_, _x__417_,
                                   _x__418_)
                                  ->
                                  let _hash__410_ =
                                    Ppx_quickcheck_runtime.Base.hash_fold_int
                                      _hash__410_ 2 in
                                  let _hash__410_ =
                                    Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                      quickcheck_observer _x__414_
                                      ~size:_size__409_ ~hash:_hash__410_ in
                                  let _hash__410_ =
                                    Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                      quickcheck_observer_int64 _x__415_
                                      ~size:_size__409_ ~hash:_hash__410_ in
                                  let _hash__410_ =
                                    Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                      quickcheck_observer _x__416_
                                      ~size:_size__409_ ~hash:_hash__410_ in
                                  let _hash__410_ =
                                    Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                      quickcheck_observer_int64 _x__417_
                                      ~size:_size__409_ ~hash:_hash__410_ in
                                  let _hash__410_ =
                                    Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                      quickcheck_observer _x__418_
                                      ~size:_size__409_ ~hash:_hash__410_ in
                                  _hash__410_))
                let _ = quickcheck_observer
              end
            let quickcheck_observer =
              Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                quickcheck_observer
            let _ = quickcheck_observer
          end
        include
          struct
            open
              struct
                let rec (quickcheck_shrinker :
                  t Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.t
                    Ppx_quickcheck_runtime.Base.Lazy.t)
                  =
                  lazy
                    (let quickcheck_shrinker =
                       Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                         quickcheck_shrinker in
                     ignore quickcheck_shrinker;
                     Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                       (function
                        | Leaf ->
                            Ppx_quickcheck_runtime.Base.Sequence.round_robin
                              []
                        | Node1 (_x__400_, _x__401_, _x__402_) ->
                            Ppx_quickcheck_runtime.Base.Sequence.round_robin
                              [Ppx_quickcheck_runtime.Base.Sequence.map
                                 (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                    quickcheck_shrinker _x__400_)
                                 ~f:(fun _x__400_ ->
                                       Node1 (_x__400_, _x__401_, _x__402_));
                              Ppx_quickcheck_runtime.Base.Sequence.map
                                (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                   quickcheck_shrinker_int64 _x__401_)
                                ~f:(fun _x__401_ ->
                                      Node1 (_x__400_, _x__401_, _x__402_));
                              Ppx_quickcheck_runtime.Base.Sequence.map
                                (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                   quickcheck_shrinker _x__402_)
                                ~f:(fun _x__402_ ->
                                      Node1 (_x__400_, _x__401_, _x__402_))]
                        | Node2
                            (_x__403_, _x__404_, _x__405_, _x__406_,
                             _x__407_)
                            ->
                            Ppx_quickcheck_runtime.Base.Sequence.round_robin
                              [Ppx_quickcheck_runtime.Base.Sequence.map
                                 (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                    quickcheck_shrinker _x__403_)
                                 ~f:(fun _x__403_ ->
                                       Node2
                                         (_x__403_, _x__404_, _x__405_,
                                           _x__406_, _x__407_));
                              Ppx_quickcheck_runtime.Base.Sequence.map
                                (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                   quickcheck_shrinker_int64 _x__404_)
                                ~f:(fun _x__404_ ->
                                      Node2
                                        (_x__403_, _x__404_, _x__405_,
                                          _x__406_, _x__407_));
                              Ppx_quickcheck_runtime.Base.Sequence.map
                                (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                   quickcheck_shrinker _x__405_)
                                ~f:(fun _x__405_ ->
                                      Node2
                                        (_x__403_, _x__404_, _x__405_,
                                          _x__406_, _x__407_));
                              Ppx_quickcheck_runtime.Base.Sequence.map
                                (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                   quickcheck_shrinker_int64 _x__406_)
                                ~f:(fun _x__406_ ->
                                      Node2
                                        (_x__403_, _x__404_, _x__405_,
                                          _x__406_, _x__407_));
                              Ppx_quickcheck_runtime.Base.Sequence.map
                                (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                   quickcheck_shrinker _x__407_)
                                ~f:(fun _x__407_ ->
                                      Node2
                                        (_x__403_, _x__404_, _x__405_,
                                          _x__406_, _x__407_))]))
                let _ = quickcheck_shrinker
              end
            let quickcheck_shrinker =
              Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                quickcheck_shrinker
            let _ = quickcheck_shrinker
          end
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
  end
module Deriving_from_wildcard =
  struct
    type _ transparent = string[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : _ transparent) -> ()
        let quickcheck_generator_transparent _generator__436_ =
          quickcheck_generator_string
        let _ = quickcheck_generator_transparent
        let quickcheck_observer_transparent _observer__434_ =
          quickcheck_observer_string
        let _ = quickcheck_observer_transparent
        let quickcheck_shrinker_transparent _shrinker__432_ =
          quickcheck_shrinker_string
        let _ = quickcheck_shrinker_transparent
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
    type 'a opaque = 'a option[@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : 'a opaque) -> ()
        let quickcheck_generator_opaque _generator__439_ =
          quickcheck_generator_option _generator__439_
        let _ = quickcheck_generator_opaque
        let quickcheck_observer_opaque _observer__438_ =
          quickcheck_observer_option _observer__438_
        let _ = quickcheck_observer_opaque
        let quickcheck_shrinker_opaque _shrinker__437_ =
          quickcheck_shrinker_option _shrinker__437_
        let _ = quickcheck_shrinker_opaque
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
    let compare_opaque = compare_option
    let sexp_of_opaque = sexp_of_option
    let opaque_examples = [None; Some 0L; Some 1L]
  end
module Do_not_generate_clauses =
  struct
    module Cannot_generate =
      struct
        type t = bool option
        let all = None :: (List.map Bool.all ~f:Option.return)
        let compare = Option.compare Bool.compare
        let sexp_of_t = Option.sexp_of_t Bool.sexp_of_t
        let quickcheck_observer =
          quickcheck_observer_option quickcheck_observer_bool
        let quickcheck_shrinker =
          quickcheck_shrinker_option quickcheck_shrinker_bool
      end
    type t =
      | Can_generate of bool 
      | Cannot_generate of Cannot_generate.t [@quickcheck.do_not_generate ]
    [@@deriving quickcheck]
    include
      struct
        let _ = fun (_ : t) -> ()
        let quickcheck_generator =
          Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
            [(1.,
               (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                  (fun ~size:_size__447_ ->
                     fun ~random:_random__448_ ->
                       Can_generate
                         (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                            quickcheck_generator_bool ~size:_size__447_
                            ~random:_random__448_))))]
        let _ = quickcheck_generator
        let quickcheck_observer =
          Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
            (fun _x__442_ ->
               fun ~size:_size__443_ ->
                 fun ~hash:_hash__444_ ->
                   match _x__442_ with
                   | Can_generate _x__445_ ->
                       let _hash__444_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__444_ 0 in
                       let _hash__444_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           quickcheck_observer_bool _x__445_
                           ~size:_size__443_ ~hash:_hash__444_ in
                       _hash__444_
                   | Cannot_generate _x__446_ ->
                       let _hash__444_ =
                         Ppx_quickcheck_runtime.Base.hash_fold_int
                           _hash__444_ 1 in
                       let _hash__444_ =
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                           Cannot_generate.quickcheck_observer _x__446_
                           ~size:_size__443_ ~hash:_hash__444_ in
                       _hash__444_)
        let _ = quickcheck_observer
        let quickcheck_shrinker =
          Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
            (function
             | Can_generate _x__440_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         quickcheck_shrinker_bool _x__440_)
                      ~f:(fun _x__440_ -> Can_generate _x__440_)]
             | Cannot_generate _x__441_ ->
                 Ppx_quickcheck_runtime.Base.Sequence.round_robin
                   [Ppx_quickcheck_runtime.Base.Sequence.map
                      (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                         Cannot_generate.quickcheck_shrinker _x__441_)
                      ~f:(fun _x__441_ -> Cannot_generate _x__441_)])
        let _ = quickcheck_shrinker
      end[@@ocaml.doc "@inline"][@@merlin.hide ]
    module Poly =
      struct
        type t =
          [ `Can_generate of bool 
          | `Cannot_generate of Cannot_generate.t
              [@quickcheck.do_not_generate ]][@@deriving quickcheck]
        include
          struct
            let _ = fun (_ : t) -> ()
            let quickcheck_generator =
              Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                [(1.,
                   (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                      (fun ~size:_size__456_ ->
                         fun ~random:_random__457_ ->
                           `Can_generate
                             (Ppx_quickcheck_runtime.Base_quickcheck.Generator.generate
                                quickcheck_generator_bool ~size:_size__456_
                                ~random:_random__457_))))]
            let _ = quickcheck_generator
            let quickcheck_observer =
              Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                (fun _x__451_ ->
                   fun ~size:_size__452_ ->
                     fun ~hash:_hash__453_ ->
                       match _x__451_ with
                       | `Can_generate _x__454_ ->
                           let _hash__453_ =
                             Ppx_quickcheck_runtime.Base.hash_fold_int
                               _hash__453_ (-895996764) in
                           let _hash__453_ =
                             Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                               quickcheck_observer_bool _x__454_
                               ~size:_size__452_ ~hash:_hash__453_ in
                           _hash__453_
                       | `Cannot_generate _x__455_ ->
                           let _hash__453_ =
                             Ppx_quickcheck_runtime.Base.hash_fold_int
                               _hash__453_ 501585681 in
                           let _hash__453_ =
                             Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                               Cannot_generate.quickcheck_observer _x__455_
                               ~size:_size__452_ ~hash:_hash__453_ in
                           _hash__453_)
            let _ = quickcheck_observer
            let quickcheck_shrinker =
              Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                (function
                 | `Can_generate _x__449_ ->
                     Ppx_quickcheck_runtime.Base.Sequence.round_robin
                       [Ppx_quickcheck_runtime.Base.Sequence.map
                          (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                             quickcheck_shrinker_bool _x__449_)
                          ~f:(fun _x__449_ -> `Can_generate _x__449_)]
                 | `Cannot_generate _x__450_ ->
                     Ppx_quickcheck_runtime.Base.Sequence.round_robin
                       [Ppx_quickcheck_runtime.Base.Sequence.map
                          (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                             Cannot_generate.quickcheck_shrinker _x__450_)
                          ~f:(fun _x__450_ -> `Cannot_generate _x__450_)])
            let _ = quickcheck_shrinker
          end[@@ocaml.doc "@inline"][@@merlin.hide ]
      end
    module _ =
      struct
        type t =
          | A 
          | B of t [@quickcheck.do_not_generate ][@@deriving quickcheck]
        include
          struct
            let _ = fun (_ : t) -> ()
            include
              struct
                open
                  struct
                    let rec (quickcheck_generator :
                      t Ppx_quickcheck_runtime.Base_quickcheck.Generator.t
                        Ppx_quickcheck_runtime.Base.Lazy.t)
                      =
                      lazy
                        (let quickcheck_generator =
                           Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                             quickcheck_generator in
                         ignore quickcheck_generator;
                         Ppx_quickcheck_runtime.Base_quickcheck.Generator.weighted_union
                           [(1.,
                              (Ppx_quickcheck_runtime.Base_quickcheck.Generator.create
                                 (fun ~size:_size__463_ ->
                                    fun ~random:_random__464_ -> A)))])
                    let _ = quickcheck_generator
                  end
                let quickcheck_generator =
                  Ppx_quickcheck_runtime.Base_quickcheck.Generator.of_lazy
                    quickcheck_generator
                let _ = quickcheck_generator
              end
            include
              struct
                open
                  struct
                    let rec (quickcheck_observer :
                      t Ppx_quickcheck_runtime.Base_quickcheck.Observer.t
                        Ppx_quickcheck_runtime.Base.Lazy.t)
                      =
                      lazy
                        (let quickcheck_observer =
                           Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                             quickcheck_observer in
                         ignore quickcheck_observer;
                         Ppx_quickcheck_runtime.Base_quickcheck.Observer.create
                           (fun _x__459_ ->
                              fun ~size:_size__460_ ->
                                fun ~hash:_hash__461_ ->
                                  match _x__459_ with
                                  | A ->
                                      let _hash__461_ =
                                        Ppx_quickcheck_runtime.Base.hash_fold_int
                                          _hash__461_ 0 in
                                      _hash__461_
                                  | B _x__462_ ->
                                      let _hash__461_ =
                                        Ppx_quickcheck_runtime.Base.hash_fold_int
                                          _hash__461_ 1 in
                                      let _hash__461_ =
                                        Ppx_quickcheck_runtime.Base_quickcheck.Observer.observe
                                          quickcheck_observer _x__462_
                                          ~size:_size__460_ ~hash:_hash__461_ in
                                      _hash__461_))
                    let _ = quickcheck_observer
                  end
                let quickcheck_observer =
                  Ppx_quickcheck_runtime.Base_quickcheck.Observer.of_lazy
                    quickcheck_observer
                let _ = quickcheck_observer
              end
            include
              struct
                open
                  struct
                    let rec (quickcheck_shrinker :
                      t Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.t
                        Ppx_quickcheck_runtime.Base.Lazy.t)
                      =
                      lazy
                        (let quickcheck_shrinker =
                           Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                             quickcheck_shrinker in
                         ignore quickcheck_shrinker;
                         Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.create
                           (function
                            | A ->
                                Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                  []
                            | B _x__458_ ->
                                Ppx_quickcheck_runtime.Base.Sequence.round_robin
                                  [Ppx_quickcheck_runtime.Base.Sequence.map
                                     (Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.shrink
                                        quickcheck_shrinker _x__458_)
                                     ~f:(fun _x__458_ -> B _x__458_)]))
                    let _ = quickcheck_shrinker
                  end
                let quickcheck_shrinker =
                  Ppx_quickcheck_runtime.Base_quickcheck.Shrinker.of_lazy
                    quickcheck_shrinker
                let _ = quickcheck_shrinker
              end
          end[@@ocaml.doc "@inline"][@@merlin.hide ]
      end
  end
